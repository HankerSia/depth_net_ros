layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param {
    shape {
      dim: 1
      dim: 3
      dim: 60
      dim: 80
    }
  }
}
layer {
  name: "conv1_1"
  type: "Convolution"
  bottom: "data"
  top: "conv1_1"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "bn1_1"
  type: "BatchNorm"
  bottom: "conv1_1"
  top: "conv1_1"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu1_1"
  type: "ReLU"
  bottom: "conv1_1"
  top: "conv1_1"
}
layer {
  name: "LRN1_1"
  type: "LRN"
  bottom: "conv1_1"
  top: "LRN1_1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv1_2"
  type: "Convolution"
  bottom: "LRN1_1"
  top: "conv1_2"
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "bn1_2"
  type: "BatchNorm"
  bottom: "conv1_2"
  top: "conv1_2"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu1_2"
  type: "ReLU"
  bottom: "conv1_2"
  top: "conv1_2"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1_2"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv2_1"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2_1"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "bn2_1"
  type: "BatchNorm"
  bottom: "conv2_1"
  top: "conv2_1"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu2_1"
  type: "ReLU"
  bottom: "conv2_1"
  top: "conv2_1"
}
layer {
  name: "conv2_2"
  type: "Convolution"
  bottom: "conv2_1"
  top: "conv2_2"
  convolution_param {
    num_output: 128
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "bn2_2"
  type: "BatchNorm"
  bottom: "conv2_2"
  top: "conv2_2"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu2_2"
  type: "ReLU"
  bottom: "conv2_2"
  top: "conv2_2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2_2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3_1"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "bn3_1"
  type: "BatchNorm"
  bottom: "conv3_1"
  top: "conv3_1"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "bn3_2"
  type: "BatchNorm"
  bottom: "conv3_2"
  top: "conv3_2"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "conv3_2"
  top: "conv3_3"
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    stride: 1
  }
}
layer {
  name: "bn3_3"
  type: "BatchNorm"
  bottom: "conv3_3"
  top: "conv3_3"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "dropout"
  type: "Dropout"
  bottom: "conv3_3"
  top: "conv3_3"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "conv6"
  type: "Convolution"
  bottom: "conv3_3"
  top: "conv6"
  convolution_param {
    num_output: 1
    pad: 0
    kernel_size: 1
    stride: 1
  }
}
layer {
  name: "deconv6_coarse"
  type: "Deconvolution"
  bottom: "conv6"
  top: "deconv6_coarse"
  convolution_param {
    num_output: 1
    bias_term: false
    kernel_size: 4
    group: 1
    stride: 2
  }
}
layer {
  name: "conv1_fine"
  type: "Convolution"
  bottom: "data"
  top: "conv1_fine"
  convolution_param {
    num_output: 63
    pad: 6
    kernel_size: 9
    stride: 1
  }
}
layer {
  name: "bn1_fine"
  type: "BatchNorm"
  bottom: "conv1_fine"
  top: "conv1_fine"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu1_fine"
  type: "ReLU"
  bottom: "conv1_fine"
  top: "conv1_fine"
}
layer {
  name: "LRN1"
  type: "LRN"
  bottom: "conv1_fine"
  top: "LRN1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "pool1_fine"
  type: "Pooling"
  bottom: "LRN1"
  top: "pool1_fine"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "crop1_fine"
  type: "Crop"
  bottom: "pool1_fine"
  bottom: "deconv6_coarse"
  top: "crop1_fine"
  crop_param {
    axis: 2
    offset: 0
    offset: 0
  }
}
layer {
  name: "concat1_fine"
  type: "Concat"
  bottom: "deconv6_coarse"
  bottom: "crop1_fine"
  top: "concat1_fine"
  concat_param {
    axis: 1
  }
}
layer {
  name: "conv2_fine"
  type: "Convolution"
  bottom: "concat1_fine"
  top: "conv2_fine"
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "bn2_fine"
  type: "BatchNorm"
  bottom: "conv2_fine"
  top: "conv2_fine"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu2_fine"
  type: "ReLU"
  bottom: "conv2_fine"
  top: "conv2_fine"
}
layer {
  name: "conv3_fine"
  type: "Convolution"
  bottom: "conv2_fine"
  top: "conv3_fine"
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    stride: 1
  }
}
layer {
  name: "bn3_fine"
  type: "BatchNorm"
  bottom: "conv3_fine"
  top: "conv3_fine"
  batch_norm_param {
    use_global_stats: true
  }
}
layer {
  name: "relu3_fine"
  type: "ReLU"
  bottom: "conv3_fine"
  top: "conv3_fine"
}
layer {
  name: "conv4_fine"
  type: "Convolution"
  bottom: "conv3_fine"
  top: "conv4_fine"
  convolution_param {
    num_output: 1
    pad: 0
    kernel_size: 1
    stride: 1
  }
}
layer {
  name: "deconv4_fine"
  type: "Deconvolution"
  bottom: "conv4_fine"
  top: "deconv4_fine"
  convolution_param {
    num_output: 1
    bias_term: false
    kernel_size: 4
    group: 1
    stride: 2
  }
}
layer {
  name: "Crop1"
  type: "Crop"
  bottom: "deconv4_fine"
  bottom: "data"
  top: "Crop1"
  crop_param {
    axis: 2
    offset: 3
    offset: 3
  }
}
layer {
  name: "score"
  type: "MVN"
  bottom: "Crop1"
  top: "score"
}
